version: '3.8'

volumes:
  pgdata:
  pgadmin:
# tar backup: docker run --rm -v pgdata:/dbdata -v $(pwd):/backup alpine tar cvf /backup/backup.tar /dbdata
# untar backup: docker run --rm -v pgdata:/dbdata -v $(pwd):/backup alpine bash -c "cd /dbdata && tar xvf /backup/backup.tar --strip 1"

networks:
  backnet:
    driver: bridge
    #internal: true
  frontnet:
    driver: bridge

services:
  store_backend:
    container_name: store_backend
    depends_on:
      - store_postgres
    build:
      context: .
      dockerfile: Dockerfile_backend
    ports:
      - "8080:8000"
    networks:
        - backnet
        - frontnet

  store_postgres:
    container_name: store_postgres
    image: postgres:alpine
    command:
      - "postgres"
      - "-c"
      - "config_file=/etc/postgresql.conf"
    environment:
      POSTGRES_DB: "${POSTGRES_NAME}"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
    volumes:
      - pgdata:/var/lib/postgresql/data            # docker volume usage
      - ./postgresql.conf:/etc/postgresql.conf
      - ./logs:/logs
    expose:
      - "5432"
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - backnet

  store_pgadmin:
    container_name: store_pgadmin
    depends_on:
      - store_postgres
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: "${PGADMIN_EMAIL}"
      PGADMIN_DEFAULT_PASSWORD: "${PGADMIN_PASSWORD}"
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    restart: unless-stopped
    networks:
      - backnet
